@page "/login"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using SyndicApp.Application.DTOs.Auth
@inject HttpClient Http
@inject NavigationManager Navigation
@* @inject Blazored.LocalStorage.ILocalStorageService LocalStorage *@

<style>
/* Plein écran sans scroll de page */
html, body { height: 100%; }
body { margin: 0; overflow: hidden; }

/* Zone de fond */
.auth-bg {
  height: 100vh;
  padding: 1.25rem;
  display: flex;
  align-items: center;
  justify-content: center;
  background:
    radial-gradient(1200px 600px at -10% -10%, #e6f4ff 0%, transparent 50%),
    radial-gradient(900px 500px at 110% 110%, #e8fff3 0%, transparent 50%),
    #f6f7fb;
}

/* Carte plus large et moins haute */
.auth-card {
  width: 100%;
  max-width: 1100px;
  height: calc(100vh - 2.5rem);
  border: 0;
  border-radius: 22px;
  overflow: hidden;
  box-shadow: 0 24px 60px rgba(16,24,40,.10);
}

/* Colonnes */
.hero, .side {
  height: 100%;
  overflow: auto;
}

.hero {
  background: linear-gradient(135deg, #0d6efd 0%, #20c997 100%);
  color: #fff;
  height: 100%;
  border-radius: 22px;   /* arrondis sur les 4 coins */
  padding: 2rem;         /* espace intérieur pour éviter que le texte touche les bords */
  overflow: hidden;      /* garde l’arrondi net */
}

.hero .badge-brand {
  background: #fff;
  color: #0d6efd;
  border-radius: 999px;
  padding: .45rem .85rem;
  font-weight: 800;
  font-size: .85rem;
  display: inline-block;
  letter-spacing: .2px;
}
.hero h1 { font-weight: 800; letter-spacing: .2px; }

/* Colonne droite */
.side { padding: clamp(1rem, 2vw, 2rem); }
.side-inner {
  max-width: 480px;
  margin: 0 auto;
  text-align: center;
}

/* Champs */
.form-control {
  max-width: 380px;
  margin: 0 auto 1rem auto;
  border-radius: 14px;
  border: 1px solid #e6e8ee;
  padding: .8rem 1rem;
  font-size: 1rem;
}
.form-control:focus {
  border-color: #86b7fe;
  box-shadow: 0 0 0 .25rem rgba(13,110,253,.15);
}

/* Checkbox */
.form-check-input {
  width: 1.1rem;
  height: 1.1rem;
  border-radius: .35rem;
}

/* Boutons */
.btn-gradient {
  border: 0;
  border-radius: 14px;
  padding: .8rem 1rem;
  font-weight: 700;
  letter-spacing: .3px;
  background-image: linear-gradient(135deg, #0d6efd 0%, #20c997 100%);
  color: #fff;
  transition: transform .05s ease, filter .2s ease;
}
.btn-gradient:hover { filter: brightness(1.05); }
.btn-gradient:active { transform: translateY(1px); }

/* Lien */
.link { color: #0d6efd; text-decoration: none; }
.link:hover { text-decoration: underline; }

/* Divider */
.hr-text { border: 0; text-align: center; margin: 1.25rem 0; }
.hr-text:before, .hr-text:after {
  content: ""; display: inline-block; width: 100%; height: 1px;
  background: #e9ecef; vertical-align: middle;
}
.hr-text:before { margin-right: .75rem; }
.hr-text:after  { margin-left:  .75rem; }
</style>

<div class="auth-bg">
  <div class="card auth-card">
    <div class="row g-0 align-items-stretch">
      
      <!-- Partie gauche -->
      <div class="col-lg-6 hero p-4 p-lg-5 d-none d-lg-block">
        <div class="d-flex flex-column justify-content-between h-100">
          <div>
            <span class="badge-brand mb-4">SyndicApp</span>
            <h1 class="mb-2">Ravi de vous revoir</h1>
            <p class="mb-4 opacity-75 fs-5">
              Connectez-vous pour gérer incidents, AG, paiements et documents.
            </p>
            <ul class="opacity-85">
              <li class="mb-2">Accès sécurisé JWT</li>
              <li class="mb-2">Profils : Syndic, Copropriétaire, Gardien…</li>
              <li class="mb-2">Interface claire et rapide</li>
            </ul>
          </div>
          <div class="opacity-75 small">
            <span class="me-3">© @DateTime.Now.Year SyndicApp</span>
            <span>v1.0</span>
          </div>
        </div>
      </div>

      <!-- Partie droite -->
      <div class="col-lg-6 side bg-white">
        <div class="side-inner">

          <div class="mb-4">
            <h3 class="fw-bold mb-1">Connexion</h3>
            <p class="text-muted mb-0">Entrez vos identifiants pour continuer</p>
          </div>

          <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
              <div class="alert alert-danger py-2 mb-3 text-center">@errorMessage</div>
            }

            <InputText class="form-control"
                       @bind-Value="loginModel.Email"
                       type="email"
                       placeholder="Adresse email" />
            <ValidationMessage For="@(() => loginModel.Email)" />

            <InputText class="form-control"
                       @bind-Value="loginModel.Password"
                       type="@passwordType"
                       placeholder="Mot de passe" />
            <ValidationMessage For="@(() => loginModel.Password)" />

            <div class="d-flex justify-content-between align-items-center mb-3" style="max-width:380px; margin:auto;">
              <div class="form-check">
                <input class="form-check-input" type="checkbox" id="remember" @bind="rememberMe" />
                <label class="form-check-label" for="remember">Se souvenir de moi</label>
              </div>
              <a href="/forgotpassword" class="small link">Mot de passe oublié ?</a>
            </div>

            <button type="submit" class="btn btn-gradient w-100" disabled="@isSubmitting">
              @if (isSubmitting)
              {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
              }
              @(isSubmitting ? "Connexion..." : "Se connecter")
            </button>

            <button type="button" class="btn btn-outline-secondary w-100 py-2 mb-3" @onclick="TogglePassword">
              @(passwordType == "password" ? "Afficher le mot de passe 👁" : "Masquer le mot de passe 🙈")
            </button>

            <div class="mt-3">
              <span class="text-muted me-1">Pas de compte ?</span>
              <a class="link" href="/register">Créer un compte</a>
            </div>
          </EditForm>

        </div>
      </div>
    </div>
  </div>
</div>

@code {
  private LoginDto loginModel = new();
  private string? errorMessage;
  private bool isSubmitting = false;
  private bool rememberMe = false;
  private string passwordType = "password";

  private void TogglePassword()
  {
    passwordType = passwordType == "password" ? "text" : "password";
  }

  private sealed record AuthResponse(string? Token, string? Role, string? Message);

  private async Task HandleLogin()
{
    errorMessage = null;
    isSubmitting = true;
    try
    {
        var resp = await Http.PostAsJsonAsync("api/auth/login", loginModel);

        if (!resp.IsSuccessStatusCode)
        {
            var apiErr = await SafeRead<AuthResponse>(resp);
            errorMessage = apiErr?.Message ?? "Échec de la connexion";
            return;
        }

        var data = await SafeRead<AuthResponse>(resp);

        // 👉 Choisir la route à partir du rôle (avec fallback sur /dashboard)
        var path = PathForRole(data?.Role);
        Navigation.NavigateTo(path, forceLoad: true);
    }
    catch (Exception ex)
    {
        errorMessage = "Erreur inattendue : " + ex.Message;
    }
    finally
    {
        isSubmitting = false;
    }
}

// Mapping rôle -> chemin
private static string PathForRole(string? role)
{
    if (string.IsNullOrWhiteSpace(role)) return "/dashboard";
    string key = RemoveDiacritics(role).ToLowerInvariant();
    return key switch
    {
        "syndic"          => "/dashboard/syndic",
        "coproprietaire"  => "/dashboard/coproprietaire",
        "copropriétaire"  => "/dashboard/coproprietaire",
        "locataire"       => "/dashboard/locataire",
        "gardien"         => "/dashboard/gardien",
        _                 => "/dashboard"
    };
}

private static string RemoveDiacritics(string s)
{
    var norm = s.Normalize(System.Text.NormalizationForm.FormD);
    var sb = new System.Text.StringBuilder();
    foreach (var ch in norm)
    {
        var cat = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(ch);
        if (cat != System.Globalization.UnicodeCategory.NonSpacingMark) sb.Append(ch);
    }
    return sb.ToString().Normalize(System.Text.NormalizationForm.FormC);
}


  private static async Task<T?> SafeRead<T>(HttpResponseMessage resp)
  {
    try { return await resp.Content.ReadFromJsonAsync<T>(); }
    catch { return default; }
  }
}

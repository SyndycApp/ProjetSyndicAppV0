@page "/register"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using SyndicApp.Application.DTOs.Auth
@inject HttpClient Http
@inject NavigationManager Navigation

<style>
/* Page scrollable */
html, body { height: 100%; }
body { margin: 0; /* pas d'overflow hidden ici */ }

/* Fond */
.auth-bg {
  min-height: 100vh;             /* s’étend si contenu long */
  padding: 1.25rem;
  display: flex;
  align-items: flex-start;        /* top align pour longs formulaires */
  justify-content: center;
  background:
    radial-gradient(1200px 600px at -10% -10%, #e6f4ff 0%, transparent 50%),
    radial-gradient(900px 500px at 110% 110%, #e8fff3 0%, transparent 50%),
    #f6f7fb;
}

/* Carte à hauteur auto */
.auth-card {
  width: 100%;
  max-width: 1100px;
  border: 0;
  border-radius: 22px;
  overflow: hidden;
  box-shadow: 0 24px 60px rgba(16,24,40,.10);
}

/* Colonnes (pas de hauteur forcée) */
.hero, .side { overflow: visible; }

/* Hero (4 coins arrondis) */
.hero {
  background: linear-gradient(135deg, #0d6efd 0%, #20c997 100%);
  color: #fff;
  border-radius: 22px;
  padding: 2rem;
}
.hero .badge-brand {
  background: #fff; color: #0d6efd;
  border-radius: 999px; padding: .45rem .85rem;
  font-weight: 800; font-size: .85rem; letter-spacing: .2px;
  display: inline-block;
}
.hero h1 { font-weight: 800; letter-spacing: .2px; }

/* Colonne droite */
.side { padding: clamp(1rem, 2vw, 2rem); }
.side-inner {
  max-width: 820px;              /* plus large pour 2 colonnes */
  margin: 0 auto;
  text-align: center;
}

/* Grille du formulaire (Bootstrap grid) */
.form-row { max-width: 820px; margin: 0 auto; }

/* Champs */
.form-control, .form-select {
  border-radius: 14px;
  border: 1px solid #e6e8ee;
  padding: .8rem 1rem;
  font-size: 1rem;
}
.form-control:focus, .form-select:focus {
  border-color: #86b7fe;
  box-shadow: 0 0 0 .25rem rgba(13,110,253,.15);
}
input::placeholder { color: #98a2b3; }

/* Ajuster la hauteur InputDate */
.input-date { padding: .65rem 1rem; }

/* Boutons */
.btn-gradient {
  border: 0; border-radius: 14px;
  padding: .9rem 1rem;
  font-weight: 700; letter-spacing: .3px;
  background-image: linear-gradient(135deg, #0d6efd 0%, #20c997 100%);
  color: #fff;
  transition: transform .05s ease, filter .2s ease;
}
.btn-gradient:hover { filter: brightness(1.05); }
.btn-gradient:active { transform: translateY(1px); }

.btn-ghost {
  border-radius: 12px;
  border: 1px solid #e6e8ee;
  background: #fff;
}

/* Lien */
.link { color: #0d6efd; text-decoration: none; }
.link:hover { text-decoration: underline; }

/* Divider */
.hr-text { border: 0; text-align: center; margin: 1.25rem 0; }
.hr-text:before, .hr-text:after {
  content: ""; display: inline-block; width: 100%; height: 1px;
  background: #e9ecef; vertical-align: middle;
}
.hr-text:before { margin-right: .75rem; }
.hr-text:after  { margin-left:  .75rem; }

/* Erreurs */
.alert { max-width: 820px; margin: .75rem auto; border-radius: 12px; }
.validation-message { display:block; margin: .25rem auto .75rem auto; color:#dc3545; max-width:400px; text-align:left; font-size:.9rem; }
</style>

<div class="auth-bg">
  <div class="card auth-card">
    <div class="row g-0">

      <!-- Hero -->
      <div class="col-lg-6 hero d-none d-lg-block">
        <div class="d-flex flex-column justify-content-between h-100">
          <div>
            <span class="badge-brand mb-4">SyndicApp</span>
            <h1 class="mb-2">Bienvenue 👋</h1>
            <p class="mb-4 opacity-75 fs-5">
              Créez votre compte pour accéder aux services : incidents, AG, paiements et documents.
            </p>
            <ul class="opacity-85">
              <li class="mb-2">Rôles : Copropriétaire, Locataire, Gardien, Syndic</li>
              <li class="mb-2">Sécurité JWT</li>
              <li class="mb-2">UX simple et rapide</li>
            </ul>
          </div>
          <div class="opacity-75 small">
            <span class="me-3">© @DateTime.Now.Year SyndicApp</span>
            <span>v1.0</span>
          </div>
        </div>
      </div>

      <!-- Formulaire -->
      <div class="col-lg-6 side bg-white">
        <div class="side-inner">

          <div class="mb-4">
            <h3 class="fw-bold mb-1">Créer un compte</h3>
            <p class="text-muted mb-0">Renseignez vos informations pour commencer</p>
          </div>

          <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
              <div class="alert alert-danger text-center py-2">@errorMessage</div>
            }

            <div class="row g-3 form-row">
              <div class="col-md-6">
                <InputText class="form-control" @bind-Value="registerModel.FullName" placeholder="Nom complet" />
                <ValidationMessage class="validation-message" For="@(() => registerModel.FullName)" />
              </div>

              <div class="col-md-6">
                <InputText class="form-control" type="email" @bind-Value="registerModel.Email" placeholder="Adresse email" />
                <ValidationMessage class="validation-message" For="@(() => registerModel.Email)" />
              </div>

              <div class="col-md-6">
                <InputText class="form-control" type="@passwordType" @bind-Value="registerModel.Password" placeholder="Mot de passe" />
                <ValidationMessage class="validation-message" For="@(() => registerModel.Password)" />
              </div>

              <div class="col-md-6">
                <InputText class="form-control" type="@passwordType" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirmer le mot de passe" />
                <ValidationMessage class="validation-message" For="@(() => registerModel.ConfirmPassword)" />
              </div>

              <div class="col-md-8">
                <InputText class="form-control" @bind-Value="registerModel.Adresse" placeholder="Adresse" />
                <ValidationMessage class="validation-message" For="@(() => registerModel.Adresse)" />
              </div>

              <div class="col-md-4">
                <InputDate class="form-control input-date" @bind-Value="registerModel.DateNaissance" />
                <div class="text-muted small" style="text-align:left;max-width:400px;margin:.25rem auto 0 auto;">Date de naissance</div>
                <ValidationMessage class="validation-message" For="@(() => registerModel.DateNaissance)" />
              </div>

              <div class="col-md-6">
                <select class="form-select" @bind="registerModel.Role">
                  <option value="">Choisissez un rôle…</option>
                  <option value="Copropriétaire">Copropriétaire</option>
                  <option value="Locataire">Locataire</option>
                  <option value="Gardien">Gardien</option>
                  <option value="Syndic">Syndic</option>
                </select>
                <ValidationMessage class="validation-message" For="@(() => registerModel.Role)" />
              </div>

              <div class="col-12">
                <button type="submit" class="btn btn-gradient w-100">S’inscrire</button>
              </div>

              <div class="col-12">
                <p class="hr-text text-muted small">ou</p>
                <button type="button" class="btn btn-ghost w-100 py-2 mb-2" @onclick="TogglePassword">
                  @(passwordType == "password" ? "Afficher les mots de passe 👁" : "Masquer les mots de passe 🙈")
                </button>
                <div class="mt-2">
                  <span class="text-muted me-1">Déjà un compte ?</span>
                  <a class="link" href="/login">Se connecter</a>
                </div>
              </div>
            </div>
          </EditForm>

        </div>
      </div>
    </div>
  </div>
</div>

@code {
  private RegisterDto registerModel = new();
  private string? errorMessage;
  private string passwordType = "password";

  private void TogglePassword()
  {
    passwordType = passwordType == "password" ? "text" : "password";
  }

  private sealed record ApiError(string? Message, List<string>? Details);

  private async Task HandleRegister()
  {
    errorMessage = null;

    try
    {
      var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);

      if (response.IsSuccessStatusCode)
      {
        Navigation.NavigateTo("/login");
        return;
      }

      ApiError? err = null;
      try { err = await response.Content.ReadFromJsonAsync<ApiError>(); } catch { }

      if (err != null && !string.IsNullOrWhiteSpace(err.Message))
      {
        errorMessage = $"Échec de l'inscription : {err.Message}" +
                       (err.Details?.Count > 0 ? "\n" + string.Join("\n", err.Details) : "");
      }
      else
      {
        var raw = await response.Content.ReadAsStringAsync();
        errorMessage = string.IsNullOrWhiteSpace(raw)
          ? "Erreur serveur inconnue (réponse vide)"
          : $"Échec de l'inscription : {raw}";
      }
    }
    catch (Exception ex)
    {
      errorMessage = $"Erreur : {ex.Message}";
    }
  }
}

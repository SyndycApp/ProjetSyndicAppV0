@page "/resetpassword"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Web
@using SyndicApp.Application.DTOs.Auth

<style>
    .reset-container {
        max-width: 400px;
        margin: 3rem auto;
        padding: 2rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        background-color: #fff;
    }

    .reset-title {
        text-align: center;
        margin-bottom: 1.5rem;
        font-weight: 700;
        color: #1c3d5a;
        font-size: 1.8rem;
    }

    .btn-reset {
        width: 100%;
        background-color: #1c3d5a;
        border: none;
        color: white;
        font-weight: 600;
    }

    .btn-reset:hover {
        background-color: #145374;
    }

    .success-message {
        color: green;
        margin-top: 1rem;
        text-align: center;
        font-weight: 600;
    }

    .error-message {
        color: #c00;
        margin-top: 1rem;
        text-align: center;
        font-weight: 600;
    }

    input::placeholder {
        color: #999;
    }
</style>

<div class="reset-container">
    <h2 class="reset-title">Réinitialisation du mot de passe</h2>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <p class="success-message">@successMessage</p>
    }
    else
    {
        <EditForm Model="resetModel" OnValidSubmit="HandleResetPassword">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <InputText type="password"
                           class="form-control"
                           @bind-Value="resetModel.NewPassword"
                           placeholder="Nouveau mot de passe" />
                <ValidationMessage For="@(() => resetModel.NewPassword)" />
            </div>

            <div class="mb-3">
                <InputText type="password"
                           class="form-control"
                           @bind-Value="resetModel.ConfirmPassword"
                           placeholder="Confirmer le nouveau mot de passe" />
                <ValidationMessage For="@(() => resetModel.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-reset">Valider</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error-message">@errorMessage</p>
        }
    }
</div>

@code {
    private ResetPasswordDto resetModel = new();
    private string? successMessage;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        var uri   = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);
        var token = query["token"];

        if (string.IsNullOrEmpty(token))
        {
            errorMessage = "Token invalide ou manquant.";
        }
        else
        {
            resetModel.Token = token;
        }
    }

    private async Task HandleResetPassword()
    {
        successMessage = null;
        errorMessage   = null;

        try
        {
            var response = await Http.PostAsJsonAsync("api/password/reset", resetModel);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Votre mot de passe a été réinitialisé avec succès.";
            }
            else
            {
                errorMessage = $"Erreur : {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur : {ex.Message}";
        }
    }
}

@page "/residences"
@using SyndicApp.Application.DTOs.Residences
@inject IHttpClientFactory ClientFactory
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<div class="d-flex" style="min-height: 100vh;">

    <!-- Navbar verticale -->
    <nav class="bg-light border-end p-3" style="width: 220px;">
        <h4 class="mb-4">SyndicApp</h4>
        <ul class="nav flex-column">
            <li class="nav-item mb-2">
                <a class="nav-link" href="/">Accueil</a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link active" href="/residences">Liste Résidences</a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link" href="/residences/create">Créer Résidence</a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link" href="/residences/edit/00000000-0000-0000-0000-000000000000">Modifier Résidence</a>
            </li>
            <li class="nav-item mt-3">
                <button class="btn btn-danger w-100" @onclick="Logout">Se déconnecter</button>
            </li>
        </ul>
    </nav>

    <!-- Contenu principal -->
    <div class="flex-grow-1 p-4">
        <h3>Liste des Résidences</h3>

        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger mt-3">@error</div>
        }
        else if (residences is null)
        {
            <p class="mt-3"><em>Chargement...</em></p>
        }
        else if (!residences.Any())
        {
            <p class="mt-3">Aucune résidence trouvée.</p>
        }
        else
        {
            <table class="table table-striped table-hover mt-3">
                <thead class="table-dark">
                    <tr>
                        <th>Nom</th>
                        <th>Adresse</th>
                        <th>Ville</th>
                        <th>Code Postal</th>
                        <th style="width:260px;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var r in residences)
                {
                    <tr>
                        <td>@r.Nom</td>
                        <td>@r.Adresse</td>
                        <td>@r.Ville</td>
                        <td>@r.CodePostal</td>
                        <td>
                            <a class="btn btn-sm btn-info me-1" href="/residences/details/@r.Id">Détails</a>
                            <a class="btn btn-sm btn-warning me-1" href="/residences/edit/@r.Id">Modifier</a>
                            <a class="btn btn-sm btn-danger" href="/residences/delete/@r.Id">Supprimer</a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }

        <a href="/residences/create" class="btn btn-primary mt-3">Ajouter une résidence</a>
    </div>

</div>

@code {
    private List<ResidenceDto>? residences;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var http = ClientFactory.CreateClient("api"); // BaseAddress = https://localhost:7172/

            // (optionnel) Ajouter le Bearer si ton API est protégée
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (!string.IsNullOrWhiteSpace(token))
                http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // ✅ route singulier conforme à ResidenceController
            var resp = await http.GetAsync("api/residence");

            if (resp.IsSuccessStatusCode)
            {
                residences = await resp.Content.ReadFromJsonAsync<List<ResidenceDto>>();
            }
            else
            {
                var body = await resp.Content.ReadAsStringAsync();
                error = $"Erreur HTTP {(int)resp.StatusCode} : {resp.ReasonPhrase}. {body}";
                residences = new();
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
            residences = new();
        }
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        Navigation.NavigateTo("/login", true);
    }
}
